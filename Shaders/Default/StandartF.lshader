#version 330 core

in vec2 TexturePos;
in vec3 Normal;
in vec3 FragPos;

	struct Texture
	{
		sampler2D main;	
		//sampler2D specular;	
	};
	struct  MatProp
	{
		float ambient;
		float diffuse;
		float specular;		
		float specularStr;
	};
	struct Color
	{
		vec3 object;
		vec3 light;
	};
	struct Pose
	{
		vec3 camera;
		vec3 light;		
	};
	struct PointL
	{
		float Kc;
		float Kl;
		float Kq;
	};
	
	
	uniform Texture Textures;
	uniform Color Colors;
	uniform MatProp Props;
	uniform Pose Poses;
	uniform PointL Point;

out vec4 color;


void main()
{
	float distance = length(Poses.light - FragPos);
	float attenuation = 1.0f/(Point.Kc + Point.Kl*distance + Point.Kq*distance*distance);
	//
	vec3 textDiff = vec3(texture(Textures.main,TexturePos));
	vec3 ambient = Colors.light*Props.ambient;	
	//
	vec3 lightDir = normalize(Poses.light - FragPos);
	float diff = max(dot(lightDir,Normal),0.f);
	vec3 Diffuse = diff * Colors.light * Props.diffuse;
	//
	vec3 cameraDir = normalize(Poses.camera - FragPos);
	vec3 reflectLight = reflect(-lightDir, Normal);
	float spec = pow(max(dot(cameraDir, reflectLight), 0.0), Props.specularStr)*Props.specular;
	vec3 specular = spec * Colors.light;
	//
	vec3 result = (ambient + Diffuse + specular) * attenuation * Colors.object * textDiff;
	color = vec4(result, 1.0f);
}
